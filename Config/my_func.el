(defun delete-haml-comment ()
  (interactive)
  (replace-string "-# " "" nil (region-beginning) (region-end) )
)
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive) (revert-buffer t t))
(defun revert-buffer-with-coding-system-no-confirm (coding-system)
  (interactive "zCoding system for visited file (default nil): ")
  (let ((coding-system-for-read coding-system))
    (revert-buffer-no-confirm)))
(defun u8()
  (interactive)
  (revert-buffer-with-coding-system-no-confirm 'utf-8)
)
(defun zhuangzai ()
  (interactive)
  (load-file "~/.emacs")
  (message " load file ~/.emacs")
  )
(defun load-buffer()
  (interactive)
  (load-file buffer-file-name)
  (message " load %s" buffer-file-name)
  )
(defun insert-date ()
  "Insert date at point."
  (interactive)
  (insert (format-time-string "%Y-%m-%e %H:%M")))
(global-set-key "\C-xt" 'insert-date) 
(defun eshell-other ()
  " Open eshell in other window "
  (interactive)
  (progn (split-window-vertically)
	 (eshell)
	 ))
(defun my-store-windows()
  "store the window positions and configurations"
  (interactive)
  (window-configuration-to-register 'p)
  )
(global-set-key [(f7)] 'my-store-windows)
(defun my-recover-windows()
  "recover the former windows configurations"
  (interactive)
  (jump-to-register 'p)
  )
(global-set-key [(shift f7)] 'my-recover-windows)

(defun open-ishell-other ()
  (interactive)
  (let (idir )
    (setq idir (file-name-directory (or (buffer-file-name) default-directory)))
    (eshell-other)
    (cd idir)))
(defun open-ishell ()
  (interactive)
  (let (idir )
    (setq idir (file-name-directory (or (buffer-file-name) default-directory)))
    (eshell)
    (cd idir)))
  
(global-set-key "\C-xm" 'open-ishell-other)
(global-set-key "\M-s\C-xm" 'open-ishell)

(defun copy-to-end (&optional n)
  "If region is active, copy region. Otherwise, copy line."
  (interactive "p")
	(kill-ring-save (point) (line-end-position n))
	(message "copy to end activated!")
 )
(global-set-key "\M-s\C-k" 'copy-to-end)
(defun my-unindent-region()
  (interactive)
  (indent-rigidly (region-beginning) (region-end) -2)
)
(global-set-key "\M-s\t" 'my-unindent-region)
